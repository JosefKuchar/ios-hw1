#!/bin/sh
POSIXLY_CORRECT=yes

# Josef Kuchar - xkucha28
# https://josefkuchar.com
# VUT FIT 2022

print_help() {
    echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
}

# $1 Date to be checked
check_date() {
    if [ "$(date -d "$1" +%Y-%m-%d 2> /dev/null)" = "$1" ]; then
        return 0
    else
        echo "Supplied date is invalid!" 1>&2
        exit 1
    fi
}

# $1 Gender to be checked
check_gender() {
    if [ "$1" != "M" -a "$1" != "Z" ]; then
        echo "Supplied gender is invalid. M,Z are valid options." 1>&2
        exit 1
    fi
}

# $1 Input
# $2 Column
agregate_area() {
    echo "$1" | awk -F "," -v c="$2" '
        {
            items[$c]++
        }
        END {
            n = asorti(items, sorted)
            for (i = 1; i <= n; i++) {
                if (sorted[i] != "") {
                    print sorted[i] ": " items[sorted[i]]
                }
            }
            if (items[""] != 0) {
                print "None: " items[""]
            }
        }
    '
}

# $1 Input
agregate_gender() {
    echo "$buffer" | awk -F "," '
        {
            if ($4 == "M") mCount++
            else if ($4 == "Z") zCount++
            else noneCount++
        }
        END {
            print "M: " mCount
            print "Z: " zCount
            if (noneCount != 0) print "None: " noneCount
        }
    '
}

# $1 Input
agregate_age() {
    echo "$1" | awk -F "," '
        {
            if ($3 == "") none++
            else if ($3 >= 0 && $3 <= 5) age1++
            else if ($3 >= 6 && $3 <= 15) age2++
            else if ($3 >= 16 && $3 <= 25) age3++
            else if ($3 >= 26 && $3 <= 35) age4++
            else if ($3 >= 36 && $3 <= 45) age5++
            else if ($3 >= 46 && $3 <= 55) age6++
            else if ($3 >= 56 && $3 <= 65) age7++
            else if ($3 >= 66 && $3 <= 75) age8++
            else if ($3 >= 76 && $3 <= 85) age9++
            else if ($3 >= 86 && $3 <= 95) age10++
            else if ($3 >= 96 && $3 <= 105) age11++
            else if ($3 >= 106) age12++
        }
        END {
            print "0-5   : " age1
            print "6-15  : " age2
            print "16-25 : " age3
            print "26-35 : " age4
            print "36-45 : " age5
            print "46-55 : " age6
            print "56-65 : " age7
            print "66-75 : " age8
            print "76-85 : " age9
            print "86-95 : " age10
            print "96-105: " age11
            print ">105  : " age12
            if (none) print "None  : " none
        }
    '
}

# $1 Input
# $2 Number of characters from the beginning
agregate_date() {
    echo "$1" | awk -F "," -v c="$2" '
        {
            items[substr($2, 0, c)]++
        }
        END {
            n = asorti(items, sorted)
            for (i = 1; i <= n; i++) {
                if (sorted[i] != "") {
                    print sorted[i] ": " items[sorted[i]]
                }
            }
            if (items[""] != 0) {
                print "None: " items[""]
            }
        }
    '
}

# $1 Agregated input
# $2 Default "width"
# $3 If histogram is to be printed
# $4 Specified width
print_agregated() {
    if [ "$3" = true ]; then
        if [ "$4" = "" ]; then
            echo "$1" | awk -F ": " -v w="$2" '
                {
                    printf $1 ":"
                    for (i = 0; i < int($2/w); i++) {
                        if (i == 0) printf " "
                        printf "#"
                    }
                    print ""
                }
            '
        else
            echo "$1" | awk -F ": " -v w="$4" '
                {
                    i++
                    names[i] = $1
                    counts[i] = $2
                    if ($2 > max) max = $2
                }
                END {
                    for (j = 1; j <= i; j++) {
                        printf names[j] ": "
                        for (k = 0; k < int((counts[j]/max)*w); k++) {
                            printf "#"
                        }
                        print ""
                    }
                }
            '
        fi
    else
        echo "$1"
    fi
}

# CSV header
header="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"

# Default arg values
gender=""
date_from=""
date_to=""
histogram=false
histogram_width=""
command=""

# Parse FILTERS
while getopts ":ha:b:g:d:r:s" opt; do
    case ${opt} in
        h ) # Process help
            print_help
            exit
        ;;
        a ) # Process date from
            date_from="$OPTARG"
            check_date "$date_from"
        ;;
        b ) # Process date to
            date_to="$OPTARG"
            check_date "$date_to"
        ;;
        g ) # Process gender
            gender="$OPTARG"
            check_gender "$gender"
        ;;
        s ) # Process histogram
            histogram=true
            eval next=\${$OPTIND}
            # If next argument is number
            if [ "$next" -ge 0 2> /dev/null ]; then
                histogram_width="$next"
                OPTIND=$((OPTIND+1))
                # If not then it is the command or file
            else
                command="$OPTARG"
            fi
        ;;
        : ) # Handle unsuplied arguments to required options
            echo "Option -$OPTARG requires an argument." 1>&2
            exit 1
        ;;
        \? ) # Handle invalid arguments
            echo "Invalid option: -$OPTARG" 1>&2
            print_help
            exit 1
        ;;
    esac
done

# Remove processed FILTERS from argument list
shift $((OPTIND -1))

# Check COMMAND
if [ -z "$1" ]; then
    command="merge"
elif echo "infected merge gender age daily monthly yearly countries districts regions" | grep -w -q $1
then
    command="$1"
    shift
else
    command="merge"
fi

buffer=""
# If no log supplied then use stdin
if [ $# -eq 0 ]; then
    buffer="$(cat | sed 1d)"
else
    # Iterate over all files
    for filename in "$@"
    do
        # Check if file exists
        if ! test -f "$filename"; then
            echo "File not found: $filename" 1>&2
            exit 1
        fi
        
        # Get file contents as a string
        if [ "${filename##*.}" = "gz" ]; then
            # Decompress, keep file, print to stdout
            input=$(gzip -dkc "$filename")
        elif [ "${filename##*.}" = "bz2" ]
        then
            # Decompress, keep file, print to stdout
            input=$(bzip2 -dkc "$filename")
        else
            input=$(cat "$filename")
        fi
        
        # Remove header
        input="$(echo "$input" | sed 1d)"
        
        # Add to buffer
        buffer="$buffer\n$input"
    done
fi

buffer="$(echo "$buffer" | tr -d '\r' | tr -d ' ' | grep '\S')"

# Get rows with errors
# Don't have to check in marge command according to forum answer
if [ "$command" != "merge" ]; then
    errors=$(echo "$buffer" | awk -F "," \
        '{
            date = $2; gsub("-", " ", date)
            if (!match($3, /^[0-9]*$/)) { print "Invalid age: " $0 }
            if (strftime("%Y-%m-%d", mktime(date " 00 00 00")) != $2) { print "Invalid date: " $0 }
        }'
    )
fi

# Apply filters
buffer=$(echo "$buffer" | awk \
    -F "," \
    -v g="$gender" \
    -v a="$date_from" \
    -v b="$date_to" \
    '(g == "" || $4 == g) && (a == "" || a <= $2) && (b == "" || b >= $2)'
)

# Don't have to check in marge command according to forum answer
if [ "$command" != "merge" ]; then
    # Get rows without errors
    filtered=$(echo "$buffer" | awk -F "," \
        '{
        date = $2; gsub("-", " ", date)
        if (match($3, /^[0-9]*$/) && (strftime("%Y-%m-%d", mktime(date " 00 00 00")) == $2)) { print }
        }'
    )
fi

# Process COMMAND
case "$command" in
    merge )
        # Print header
        echo "$header"
        # Print data
        # We don't check errors here
        if [ "$buffer" != "" ]; then
            echo "$buffer"
        fi
        exit
    ;;
    infected )
        echo "$filtered" > test.txt
        echo "$filtered" | wc -l
    ;;
    countries )
        without_cz=$(echo "$filtered" | awk -F "," '$8 != "CZ" && $8 != ""')
        agregated=$(agregate_area "$without_cz" 8)
        print_agregated "$agregated" 100 "$histogram" "$histogram_width"
    ;;
    districts )
        agregated=$(agregate_area "$filtered" 6)
        print_agregated "$agregated" 1000 "$histogram" "$histogram_width"
    ;;
    regions )
        agregated=$(agregate_area "$filtered" 5)
        print_agregated "$agregated" 10000 "$histogram" "$histogram_width"
    ;;
    age )
        agregated=$(agregate_age "$filtered")
        print_agregated "$agregated" 10000 "$histogram" "$histogram_width"
    ;;
    gender )
        agregated=$(agregate_gender "$filtered")
        print_agregated "$agregated" 100000 "$histogram" "$histogram_width"
    ;;
    daily )
        agregated=$(agregate_date "$filtered" 10)
        print_agregated "$agregated" 500 "$histogram" "$histogram_width"
    ;;
    monthly )
        agregated=$(agregate_date "$filtered" 7)
        print_agregated "$agregated" 10000 "$histogram" "$histogram_width"
    ;;
    yearly )
        agregated=$(agregate_date "$filtered" 4)
        print_agregated "$agregated" 100000 "$histogram" "$histogram_width"
    ;;
esac

# Print errors
if [ "$errors" != "" ]; then
    echo "$errors" 1>&2
fi
